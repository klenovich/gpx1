Sure, here are the core classes, functions, and methods that will be necessary for our Snake game:

1. Model:
- Snake: represents the snake in the game, with methods to move, grow, and check for collisions
- Food: represents the food in the game, with methods to randomly generate a new location
- Game: represents the game itself, with methods to start, pause, and end the game, as well as keep track of the score and high score

2. View:
- Board: represents the game board, with methods to draw the snake, food, and score on the screen

3. Controller:
- KeyboardController: handles keyboard input from the user, with methods to update the direction of the snake based on the input

Here is the content of each file:

1. main.py (entrypoint)
```python
from model import Snake, Food, Game
from view import Board
from controller import KeyboardController

if __name__ == '__main__':
    # Initialize game objects
    snake = Snake()
    food = Food()
    game = Game()
    board = Board()
    controller = KeyboardController(snake)

    # Start the game loop
    while True:
        # Update the snake's direction based on keyboard input
        controller.update_direction()

        # Move the snake and check for collisions
        snake.move()
        if snake.check_collision():
            game.end_game()

        # Check if the snake has eaten the food
        if snake.check_food_collision(food):
            snake.grow()
            food.generate_new_location()
            game.update_score()

        # Update the board with the new game state
        board.draw(snake, food, game)
```

2. model.py
```python
from dataclasses import dataclass
from enum import Enum
import random

class Direction(Enum):
    UP = 1
    DOWN = 2
    LEFT = 3
    RIGHT = 4

@dataclass
class Point:
    x: int
    y: int

class Snake:
    def __init__(self):
        self.direction = Direction.RIGHT
        self.body = [Point(0, 0), Point(1, 0), Point(2, 0)]

    def move(self):
        # Move the snake's body
        for i in range(len(self.body) - 1, 0, -1):
            self.body[i] = Point(self.body[i-1].x, self.body[i-1].y)

        # Move the snake's head in the current direction
        if self.direction == Direction.UP:
            self.body[0] = Point(self.body[0].x, self.body[0].y - 1)
        elif self.direction == Direction.DOWN:
            self.body[0] = Point(self.body[0].x, self.body[0].y + 1)
        elif self.direction == Direction.LEFT:
            self.body[0] = Point(self.body[0].x - 1, self.body[0].y)
        elif self.direction == Direction.RIGHT:
            self.body[0] = Point(self.body[0].x + 1, self.body[0].y)

    def grow(self):
        # Add a new body segment to the end of the snake
        self.body.append(self.body[-1])

    def check_collision(self):
        # Check if the snake has collided with the walls or itself
        head = self.body[0]
        if head.x < 0 or head.x >= 20 or head.y < 0 or head.y >= 20:
            return True
        for i in range(1, len(self.body)):
            if head.x == self.body[i].x and head.y == self.body[i].y:
                return True
        return False

    def check_food_collision(self, food):
        # Check if the snake has collided with the food
        head = self.body[0]
        if head.x == food.location.x and head.y == food.location.y:
            return True
        return False

class Food:
    def __init__(self):
        self.location = Point(random.randint(0, 19), random.randint(0, 19))

    def generate_new_location(self):
        # Generate a new random location for the food
        self.location = Point(random.randint(0, 19), random.randint(0, 19))

class Game:
    def __init__(self):
        self.score = 0
        self.high_score = 0
        self.is_paused = False
        self.is_game_over = False

    def start_game(self):
        # Reset the game state
        self.score = 0
        self.is_paused = False
        self.is_game_over = False

    def pause_game(self):
        self.is_paused = True

    def resume_game(self):
        self.is_paused = False

    def end_game(self):
        self.is_game_over = True
        if self.score > self.high_score:
            self.high_score = self.score

    def update_score(self):
        self.score += 10
```

3. view.py
```python
import pygame

class Board:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((400, 400))
        pygame.display.set_caption('Snake')

    def draw(self, snake, food, game):
        # Clear the screen
        self.screen.fill((0, 0, 0))

        # Draw the snake
        for segment in snake.body:
            pygame.draw.rect(self.screen, (255, 255, 255), (segment.x * 20, segment.y * 20, 20, 20))

        # Draw the food
        pygame.draw.rect(self.screen, (255, 0, 0), (food.location.x * 20, food.location.y * 20, 20, 20))

        # Draw the score
        font = pygame.font.SysFont(None, 30)
        score_text = font.render(f'Score: {game.score}', True, (255, 255, 255))
        self.screen.blit(score_text, (10, 10))

        # Draw the high score
        high_score_text = font.render(f'High Score: {game.high_score}', True, (255, 255, 255))
        self.screen.blit(high_score_text, (10, 40))

        # Update the screen
        pygame.display.update()
```

4. controller.py
```python
import pygame
from model import Direction

class KeyboardController:
    def __init__(self, snake):
        self.snake = snake

    def update_direction(self):
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and self.snake.direction != Direction.DOWN:
                    self.snake.direction = Direction.UP
                elif event.key == pygame.K_DOWN and self.snake.direction != Direction.UP:
                    self.snake.direction = Direction.DOWN
                elif event.key == pygame.K_LEFT and self.snake.direction != Direction.RIGHT:
                    self.snake.direction = Direction.LEFT
                elif event.key == pygame.K_RIGHT and self.snake.direction != Direction.LEFT:
                    self.snake.direction = Direction.RIGHT
```